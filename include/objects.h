#pragma once

#include <jni.h>

#ifdef __cplusplus
extern "C" {
#endif

#define JNIKIT_BOOLEAN_SIGNATURE "Z"
#define JNIKIT_CHAR_SIGNATURE "C"
#define JNIKIT_BYTE_SIGNATURE "B"
#define JNIKIT_SHORT_SIGNATURE "S"
#define JNIKIT_INT_SIGNATURE "I"
#define JNIKIT_LONG_SIGNATURE "J"
#define JNIKIT_FLOAT_SIGNATURE "F"
#define JNIKIT_DOUBLE_SIGNATURE "D"
#define JNIKIT_OBJECT_SIGNATURE(type_name) "L" #type_name ";"

#define JNIKIT_ARRAY_SIGNATURE(type_signature) "[" type_signature
#define JNIKIT_BOOLEANARRAY_SIGNATURE JNIKIT_ARRAY_SIGNATURE(JNIKIT_BOOLEAN_SIGNATURE)
#define JNIKIT_BYTEARRAY_SIGNATURE JNIKIT_ARRAY_SIGNATURE(JNIKIT_BYTE_SIGNATURE)
#define JNIKIT_CHARARRAY_SIGNATURE JNIKIT_ARRAY_SIGNATURE(JNIKIT_CHAR_SIGNATURE)
#define JNIKIT_SHORTARRAY_SIGNATURE JNIKIT_ARRAY_SIGNATURE(JNIKIT_SHORT_SIGNATURE)
#define JNIKIT_INTARRAY_SIGNATURE JNIKIT_ARRAY_SIGNATURE(JNIKIT_INT_SIGNATURE)
#define JNIKIT_LONGARRAY_SIGNATURE JNIKIT_ARRAY_SIGNATURE(JNIKIT_LONG_SIGNATURE)
#define JNIKIT_FLOATARRAY_SIGNATURE JNIKIT_ARRAY_SIGNATURE(JNIKIT_FLOAT_SIGNATURE)
#define JNIKIT_DOUBLEARRAY_SIGNATURE JNIKIT_ARRAY_SIGNATURE(JNIKIT_DOUBLE_SIGNATURE)
#define JNIKIT_OBJECTARRAY_SIGNATURE(type_name) JNIKIT_ARRAY_SIGNATURE(JNIKIT_OBJECT_SIGNATURE(typename))

#define JNIKIT_METHOD_SIGNATURE(return_type_signature, ...) "(" __VA_ARGS__ ")" return_type_signature
#define JNIKIT_VOIDMETHOD_SIGNATURE(...) JNIKIT_METHOD_SIGNATURE("V", __VA_ARGS__)
#define JNIKIT_BOOLEANMETHOD_SIGNATURE(...) JNIKIT_METHOD_SIGNATURE(JNIKIT_BOOLEAN_SIGNATURE, __VA_ARGS__)
#define JNIKIT_CHARMETHOD_SIGNATURE(...) JNIKIT_METHOD_SIGNATURE(JNIKIT_CHAR_SIGNATURE, __VA_ARGS__)
#define JNIKIT_BYTEMETHOD_SIGNATURE(...) JNIKIT_METHOD_SIGNATURE(JNIKIT_BYTE_SIGNATURE, __VA_ARGS__)
#define JNIKIT_SHORTMETHOD_SIGNATURE(...) JNIKIT_METHOD_SIGNATURE(JNIKIT_SHORT_SIGNATURE, __VA_ARGS__)
#define JNIKIT_INTMETHOD_SIGNATURE(...) JNIKIT_METHOD_SIGNATURE(JNIKIT_INT_SIGNATURE, __VA_ARGS__)
#define JNIKIT_LONGMETHOD_SIGNATURE(...) JNIKIT_METHOD_SIGNATURE(JNIKIT_LONG_SIGNATURE, __VA_ARGS__)
#define JNIKIT_FLOATMETHOD_SIGNATURE(...) JNIKIT_METHOD_SIGNATURE(JNIKIT_FLOAT_SIGNATURE, __VA_ARGS__)
#define JNIKIT_DOUBLEMETHOD_SIGNATURE(...) JNIKIT_METHOD_SIGNATURE(JNIKIT_DOUBLE_SIGNATURE, __VA_ARGS__)
#define JNIKIT_OBJECTMETHOD_SIGNATURE(type_name, ...) JNIKIT_METHOD_SIGNATURE(JNIKIT_OBJECT_SIGNATURE(type_name), __VA_ARGS__)

#define JNIKIT_ARRAYMETHOD_SIGNATURE(type_signature, ...) JNIKIT_METHOD_SIGNATURE(JNIKIT_ARRAY_SIGNATURE(type_signature), __VA_ARGS__)
#define JNIKIT_BOOLEANARRAYMETHOD_SIGNATURE(...) JNIKIT_METHOD_SIGNATURE(JNIKIT_BOOLEANARRAY_SIGNATURE, __VA_ARGS__)
#define JNIKIT_CHARARRAYMETHOD_SIGNATURE(...) JNIKIT_METHOD_SIGNATURE(JNIKIT_CHARARRAY_SIGNATURE, __VA_ARGS__)
#define JNIKIT_BYTEARRAYMETHOD_SIGNATURE(...) JNIKIT_METHOD_SIGNATURE(JNIKIT_BYTEARRAY_SIGNATURE, __VA_ARGS__)
#define JNIKIT_SHORTARRAYMETHOD_SIGNATURE(...) JNIKIT_METHOD_SIGNATURE(JNIKIT_SHORTARRAY_SIGNATURE, __VA_ARGS__)
#define JNIKIT_INTARRAYMETHOD_SIGNATURE(...) JNIKIT_METHOD_SIGNATURE(JNIKIT_INTARRAY_SIGNATURE, __VA_ARGS__)
#define JNIKIT_LONGARRAYMETHOD_SIGNATURE(...) JNIKIT_METHOD_SIGNATURE(JNIKIT_LONGARRAY_SIGNATURE, __VA_ARGS__)
#define JNIKIT_FLOATARRAYMETHOD_SIGNATURE(...) JNIKIT_METHOD_SIGNATURE(JNIKIT_FLOATARRAY_SIGNATURE, __VA_ARGS__)
#define JNIKIT_DOUBLEARRAYMETHOD_SIGNATURE(...) JNIKIT_METHOD_SIGNATURE(JNIKIT_DOUBLEARRAY_SIGNATURE, __VA_ARGS__)
#define JNIKIT_OBJECTARRAYMETHOD_SIGNATURE(type_name, ...) JNIKIT_METHOD_SIGNATURE(JNIKIT_OBJECTARRAY_SIGNATURE(type_name), __VA_ARGS__)


jclass jnikit_get_class(JNIEnv* env, const char* name);

jmethodID jnikit_get_static_method(JNIEnv* env, jclass cls, const char* name, const char* signature);

jmethodID jnikit_get_method(JNIEnv* env, jclass cls, const char* name, const char* signature);

jmethodID jnikit_get_constructor(JNIEnv* env, jclass cls, const char* signature);

jfieldID jnikit_get_static_field(JNIEnv* env, jclass cls, const char* name, const char* signature);

jfieldID jnikit_get_field(JNIEnv* env, jclass cls, const char* name, const char* signature);

jint jnikit_get_enum_ordinal(JNIEnv* env, jclass cls, jobject enum_constant);

jobject jnikit_new_object(JNIEnv* env, const char* cls, const char* ctor_signature, ...);

jobject jnikit_new_object_a(JNIEnv* env, const char* cls, const char* ctor_signature, const jvalue* args);

jobject jnikit_new_object_v(JNIEnv* env, const char* cls, const char* ctor_signature, va_list args);

#ifdef __cplusplus
}
#endif
